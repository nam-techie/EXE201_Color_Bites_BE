name: Publish OpenAPI to SwaggerHub

on:
  push:
    branches: [ main, develop ]   # cá»© push lÃ  auto cáº­p nháº­t SwaggerHub

jobs:
  spring-openapi:
    runs-on: ubuntu-latest
    env:
      # ðŸ‘‡ Sá»­a 3 dÃ²ng dÆ°á»›i cho Ä‘Ãºng dá»± Ã¡n cá»§a báº¡n
      APP_DIR: .                  # thÆ° má»¥c chá»©a project Spring ('.' náº¿u á»Ÿ root)
      API_NAME: color-bites       # tÃªn API trÃªn SwaggerHub (vd: color-bites)
      APP_PORT: 8080              # cá»•ng app cháº¡y local trong CI (Spring sáº½ nghe á»Ÿ Ä‘Ã¢y)

      OWNER: ${{ secrets.SWAGGERHUB_OWNER }}         # VD: Namtechie (org/user)
      SWAGGERHUB_API_KEY: ${{ secrets.SWAGGERHUB_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Build (skip tests for speed)
        working-directory: ${{ env.APP_DIR }}
        run: mvn -q -DskipTests package

      - name: Run app in background
        working-directory: ${{ env.APP_DIR }}
        run: |
          nohup java -jar $(ls target/*-SNAPSHOT.jar 2>/dev/null || ls target/*.jar | head -n1) --server.port=${APP_PORT} > app.log 2>&1 &
          echo $! > app.pid
          # Wait until /v3/api-docs returns 200
          for i in {1..40}; do
            curl -fsS "http://localhost:${APP_PORT}/v3/api-docs" >/dev/null && break
            sleep 3
          done

      - name: Export OpenAPI (JSON)
        run: curl -fsS "http://localhost:${APP_PORT}/v3/api-docs" -o openapi.json

      - name: Stop app and show tail logs on failure/success
        if: always()
        working-directory: ${{ env.APP_DIR }}
        run: |
          if [ -f app.pid ]; then kill -9 $(cat app.pid) || true; fi
          echo "---- last 80 lines of app.log ----"
          tail -n 80 app.log || true

      - name: Install swaggerhub-cli
        run: npm i -g swaggerhub-cli

      - name: Set version/visibility by branch
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "VERSION=1.0.0" >> $GITHUB_ENV
            echo "VISIBILITY=public" >> $GITHUB_ENV
          else
            echo "VERSION=1.0.0-dev" >> $GITHUB_ENV
            echo "VISIBILITY=private" >> $GITHUB_ENV
          fi

      - name: Create API if not exists
        run: swaggerhub api:create "$OWNER/${{ env.API_NAME }}/$VERSION" -f openapi.json --visibility=$VISIBILITY || true

      - name: Update API spec
        run: swaggerhub api:update "$OWNER/${{ env.API_NAME }}/$VERSION" -f openapi.json

      - name: Publish version (main only)
        if: github.ref == 'refs/heads/main'
        run: swaggerhub api:publish "$OWNER/${{ env.API_NAME }}/$VERSION"
